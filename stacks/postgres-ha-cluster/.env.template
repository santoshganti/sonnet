# =========================
# Nyx PostgreSQL HA Cluster
# =========================
#
# Copy this file to a node-specific env file:
#   - docker41.env (docker01)
#   - docker42.env (docker02)
#   - docker43.env (docker03)
#   - docker44.env (docker04)  # optional
#
# Then adjust only the per-node variables in those files.
# All values here are safe defaults or placeholders.
#
# ---------- Cluster Basics ----------
CLUSTER_NAME=nyxpg
PG_MAJOR=16
PATRONI_SCOPE=${CLUSTER_NAME}
PATRONI_LOG_LEVEL=INFO

# Patroni synchronous replication policy (per APPLY contract)
PATRONI_SYNCHRONOUS_MODE=true
PATRONI_SYNCHRONOUS_MODE_STRICT=false
PATRONI_SYNCHRONOUS_NODE_COUNT=1
# Any docker host can be the sync standby, TrueNAS excluded
PATRONI_SYNC_STANDBY_NAMES=FIRST 1 (docker01,docker02,docker03,docker04)

# Superuser & replication accounts (set strong passwords!)
PATRONI_SUPERUSER_USERNAME=postgres
PATRONI_SUPERUSER_PASSWORD=CHANGE_ME_SUPER
PATRONI_REPLICATION_USERNAME=replicator
PATRONI_REPLICATION_PASSWORD=CHANGE_ME_REPL

# Monitoring & PgBouncer users
MONITOR_USERNAME=monitor
MONITOR_PASSWORD=CHANGE_ME_MON
PGBOUNCER_USERNAME=pgbouncer
PGBOUNCER_PASSWORD=CHANGE_ME_PGB

# ---------- Networking ----------
# Per APPLY: consensus + replication on 10.0.0.0/24, client on 192.168.6.0/24
CONSENSUS_SUBNET=10.0.0.0/24
REPL_SUBNET=10.0.0.0/24
CLIENT_SUBNET=192.168.6.0/24

# Patroni REST API (bind to consensus/replication interface)
PATRONI_REST_PORT=8008

# PgBouncer client port
PGBOUNCER_PORT=6432

# HAProxy (leader routing) local port
HAPROXY_PORT=5433

# Macvlan parent interface for client VLAN (example: enp3s0.6 or br-lan.6)
# Leave empty to skip macvlan creation (service will use host networking only).
CLIENT_IFACE=

# Client network settings for macvlan (if used)
CLIENT_GATEWAY=192.168.6.1
CLIENT_SUBNET_CIDR=192.168.6.0/24

# ---------- etcd ----------
ETCD_TOKEN=${CLUSTER_NAME}-token

# ---------- Storage (ZFS) ----------
ZFS_BASE=/mnt/zfspool/databases/postgres

# ---------- Images (pin as desired) ----------
ETCD_IMAGE=quay.io/coreos/etcd:v3.5.13
SPILO_IMAGE=ghcr.io/zalando/spilo-16:latest
PGBOUNCER_IMAGE=edoburu/pgbouncer:latest
POSTGRES_EXPORTER_IMAGE=quay.io/prometheuscommunity/postgres-exporter:latest
PGBOUNCER_EXPORTER_IMAGE=spreaker/prometheus-pgbouncer-exporter:latest
HAPROXY_IMAGE=haproxy:2.9

# ---------- Resource Reservations/Limits ----------
# Patroni/Postgres
PATRONI_RES_CPUS_RESERVATION=2.0
PATRONI_RES_MEM_RESERVATION=8g
PATRONI_RES_CPUS_LIMIT=4.0
PATRONI_RES_MEM_LIMIT=16g
PATRONI_SHM_SIZE=1g

# etcd
ETCD_RES_CPUS_RESERVATION=1.0
ETCD_RES_MEM_RESERVATION=1g
ETCD_RES_CPUS_LIMIT=2.0
ETCD_RES_MEM_LIMIT=2g

# ---------- HAProxy backends (list all Postgres node IPs on replication network) ----------
# Comma-separated list, no spaces. Used to render haproxy.cfg dynamically.
# Example: 10.0.0.41,10.0.0.42,10.0.0.43[,10.0.0.44]
HAPROXY_BACKEND_IPS=10.0.0.41,10.0.0.42,10.0.0.43

# ---------- Optional: Backups via pgBackRest to MinIO/S3 ----------
# (Provide values and uncomment related sections in init script if desired)
# S3_ENDPOINT=http://10.0.0.101:9000
# S3_BUCKET=postgres-backups
# S3_REGION=minio
# S3_ACCESS_KEY=CHANGE_ME
# S3_SECRET_KEY=CHANGE_ME
# BACKUP_RETENTION="7 daily, 4 weekly, 12 monthly"
